#+TITLE ICFP 2012 notes/scratch


* Initial setup
  CLOCK: [2012-07-13 Fri 11:03]--[2012-07-13 Fri 11:59] =>  0:56
  CLOCK: [2012-07-13 Fri 10:53]--[2012-07-13 Fri 10:59] =>  0:06

 - distribution:
   - ./src/ where sourcecode lives
   - ./install
   - ./lifter < map > route
   - ./PACKAGES packages to install
   - ./README

 - use buildapp to produce final executable
 - use quicklisp for bringing in libraries, but plunk them into vendor
   or similar, use an asdf file for loading everything



* Programs

** Library
   CLOCK: [2012-07-13 Fri 11:59]--[2012-07-13 Fri 12:13] =>  0:14

 - reading metadata:
   - read until we've found a robot and a lift.  if no robot or lift,
     complain.
   - first blank line after robot and lift marks start of metadata

default water levels: water 0, flooding 0, waterproof 10

*** STARTED develop model for CA
    CLOCK: [2012-07-13 Fri 21:38]--[2012-07-13 Fri 21:44] =>  0:06
    CLOCK: [2012-07-13 Fri 18:11]--[2012-07-13 Fri 18:47] =>  0:36
     CLOCK: [2012-07-13 Fri 12:13]--[2012-07-13 Fri 16:30] =>  4:17

  - the outer border should never change since there should always be
    walls, so don't bother updating it.

  - model:
    - (m,n) array of values
    - robot position
    - lift position and state
    - lambda positions


 The lift is never open at the start, according to the spec.

 Update map only needs to consider tiles with rocks.

 Maybe we should use bitplanes?  Then you can have fast updates.
  - m x n planes:
    - empty?
    - rock?
    - lambda?

 a robot move can change the rock plane, lambda plane, the earth
 plane, and the empty plane.
 a rock move can only change the rock plane and the empty plane.

if you compute empty at the beginning, you can throw away the earth
plane, because earth = (not empty) & (not rock) & (not lambda) & (not
wall), and earth is not necessary to compute anything.  Actually, this
isn't true; you need earth, but perhaps not wall.  Well, you need one
or the other.

 If it's not empty, it could be a bunch of stuff.


If you pad each row to a power of two, you can do efficient shifting
by implementing your own bignums.  Vertical shifts can just offset the
pointer by the row stride, while horizontal shifts can rotate on the
fly with nearby words.


Logic model:
 1. R and up(E) => down(R), E!
 2. R and up(R) and left(E) and upleft(E) => downright(R), E!
 3. R and up(R) and right(E) and upright(E) => downleft(R), E!
 4. R and up(Î») and left(E) and upleft(E) => downright(R), E!
 5. R => R

R' = R & ~(1 | 2 | 3 | 4) | (1 & down(R)) | ((2|4) & downright(R)) | (3 & downleft(R))

E' = E & R' | (1 | 2 | 3 | 4)


*** STARTED develop model for robot movement
    CLOCK: [2012-07-13 Fri 16:46]--[2012-07-13 Fri 17:19] =>  0:33

P' = P + O
valid when
   E & P'
or earth & P'
or (|O| < 2) & (R&P') & (E& P'+O)

** Simulator
   CLOCK: [2012-07-15 Sun 01:01]--[2012-07-15 Sun 02:29] =>  1:28
   CLOCK: [2012-07-14 Sat 23:01]--[2012-07-14 Sat 23:41] =>  0:40
   CLOCK: [2012-07-14 Sat 20:44]--[2012-07-14 Sat 22:55] =>  2:11
   CLOCK: [2012-07-14 Sat 19:30]--[2012-07-14 Sat 19:52] =>  0:22
   CLOCK: [2012-07-14 Sat 18:54]--[2012-07-14 Sat 18:55] =>  0:01
   CLOCK: [2012-07-14 Sat 16:18]--[2012-07-14 Sat 17:51] =>  1:33
   CLOCK: [2012-07-14 Sat 11:13]--[2012-07-14 Sat 15:15] =>  4:02
   CLOCK: [2012-07-13 Fri 23:16]--[2012-07-14 Sat 01:42] =>  2:26
   CLOCK: [2012-07-13 Fri 22:57]--[2012-07-13 Fri 23:15] =>  0:18

harness might need to eat initial whitespace since we probably can't
deal with it.

 should take map and metadata
 if metadata contains route, compute the route til an ending
 condition, print final map, condition, and points

  - non-graphical: take a map and a move, output resulting map
  - graphical:
    - use tiles
    - forward/back buttons
    - eventually some way to visualize danger by tinting tiles red
    - take route input from program or 
    - show water levels with blue tint

 - return condition (win, lose, abort), number of turns, and lambdas
   collected.

I'm tempted to implement the simulator in J, but maybe python is a
better choice.

** Lifter
   CLOCK: [2012-07-15 Sun 19:48]--[2012-07-15 Sun 23:11] =>  3:23
   CLOCK: [2012-07-15 Sun 16:30]--[2012-07-15 Sun 18:37] =>  2:07
   CLOCK: [2012-07-15 Sun 16:18]--[2012-07-15 Sun 16:22] =>  0:04

 - parent that spawns child
   - first determines parameters of input
   - spawns appropriate lifter based on input size
   - implement a non-consing lifter for huge maps
 - child communicates routes back to parent with estimated value

Plan moves one at a time or as a whole?
One at a time is simple and fast but suboptimal.

Perhaps we should implement a greedy player as a quick test, who at
each tick:
 - moves to the nearest open lift, or nearest lambda if lift is
   unavailable.
   - 

*** lifter subroutines

pavlidis contour tracing starting from the robot start point


*** MCTS lifter

Three main components:
 - the state table
 - MCTS
 - the simulator
 
With MCTS, we're going to follow Schadd et al.'s SP-MCTS, including
the idea of resetting search with a new random seed periodically.  The
state table is responsible for persistence between MCTS searches.

Simulation interface:
 - given a state and a move:
   - compute the value of the move and store it in the state table
   - return valid moves from this position

State table interface:
 - get best score and route
 - insert state with score and route

MCTS:
 - when building new nodes, get a list of valid moves from previous
   state, and choose randomly from weighted list of moves

We may want to mmap the state table or use an external store like
redis to take advantage of disk space for large search spaces.  We
have around 25G to take advantage of, but disk is cleared between
runs.  We can shipped cached best results against the published
problems with our submission, however.

Schaad's paper shows that a better heuristic than random valid moves
improves performance greatly, so we should probably try a couple like
weighting moves by distance to nearest lambda or open lift.


Ok, let's get the initial state by walking the map from the initial
position, including all areas that can conceivably be reached:
 - starting from R, include all neighbors
 - if here is a wall or lift, stop.
 - if here is a trampoline, connect the graph to the target

This isn't going to work, let's just use a 2D array.
One-dimensionalization seems fundamentally incompatible with the idea
of a graph structure.

Can we do this with a Morton curve?  How do we start at an arbitrary
point and still cover the entire connected component?

If we do this, we can represent traversible space as an array where
each node has 4 bits for whether it has neighbors, and 4 bits for
type:

rock plane
empty plane
beard plane
lambda plane

Any way of tessellating the state storage so Moore neighborhood is
easy to come by?

| bits | name       | passable? bit 0           | connected? | stops rock? bits 2-3 = 01 | collectable? |
|    0 | empty      | yes                       | yes        | no                        | no           |
|    1 | wall       | no                        | no         | yes                       | no           |
|   10 | earth      | yes                       | yes        | yes                       | yes          |
|   11 | robot      | no                        | yes        | yes                       | ?            |
|  110 | lambda     | yes                       | yes        | maybe                     | yes          |
|  101 | rock       | no                        | yes        | maybe                     | ?            |
|  100 |            |                           |            |                           |              |
|  111 | horock     | no                        | yes        | maybe                     | ?            |
| 1000 | razor      | yes                       | yes        | yes                       | yes          |
| 1001 | beard      | no                        | yes        | yes                       | no           |
| 1011 |            |                           |            |                           |              |
| 1010 | jump       | yes                       | doubly so  | yes                       | yes          |
| 1100 |            |                           |            |                           |              |
| 1101 | target     | no                        | yes        | yes                       |              |
| 1110 | open lift? |                           |            |                           | yes          |
| 1111 | lift       | only if no lambdas remain | no         | yes                       |              |

trampolines will not need to be individually labelled as the graph
structure will be indicative of them, except that when trampolines
disappear, you need to delete all of them -- so keep an auxiliary
vector mapping trampolines to target nodes.  when a trampoline
disappears, walk the trampoline vector removing all which hit the same
target.

Connectify needs to follow all eight adjacencies from a trampoline.

How do beards deal with our 4-connected world?  Well, any fetch
outside the node list is treated as a wall.

other auxiliary information for a state:
 - water level
 - robot saturation
 - points
 - number of lambdas
 - razors collected

nodes will need to be labelled with a 32-bit int, to permit jumps.
can we store things so that the usual case (adjacent squares) is
implicit?  if type is not equal to jump, neighbors are found
implicitly.  otherwise, look at auxiliary index.  so the node vector
can be bytes.

a heap can be stored in a compact way so that all traversal is
implicit.  can we achieve the same thing with this quadtree model?

what kind of memory allocation is required?  obviously we must keep at
least one copy of the state, but the hash table need only contain the
route and point information.

the MCTS tree and the routes can grow without bound effectively, so
too the hash table.

state evaluation for each node needs its Moore neighborhood, so it
needs to be fast to get that from the node vector.  be careful not to
follow jumps when updating the board.  we'll keep an old and new state
allocated and swap the pointers as we go.

we could log routes to a file that the parent process reads on child
termination or timeout (SIGINT).

can we make estimates of how much space we'll need for the route tree
and the hash table?  the hash table can be artificially limited as
necessary.

Ok, we can allocate a large, fixed-size hash table for states, as
well as the two state buffers.


So:

 - main:
   - read map data in temp buffer
   - read metadata
   - connectify:
     - blow away old initial state file
     - mmap a file with enough space for initial state buffer (m*n is
       the maximum)
     - traverse map into initial state buffer, including jump vector
   - create future and prior state buffer as copy of initial
     (maintain original as a file so we can do metasearch)
   - open best log for async appends
   - allocate hash table
   - any allocations after this point will be for the MCTS tree, which
     can be blown away each metasearch.
   - while 1
     - allocate new MCTS tree
     - MCTS

Although if the parent did the first three steps, the child could
pretend each start was fresh.  That way metasearch could be a feature
of the parent.  But the state table needs to be preserved.

Parent:
 - blow away temp files
 - spawn child and pass stdin to it
 - pause(3) until SIGINT
   - restart child if we got SIGCHLD?
 - on SIGINT, read tail of bestlog to stdout
 - blow away temp files

Metasearch should happen when we've played for a while and the best
route hasn't changed much.

Ok, forget about efficiency.  How could we get an implementation of
MCTS done quickly?

** DONE Harness
   - State "DONE"       from ""           [2012-07-13 Fri 22:48]

 - pass map to lifter
 - send SIGINT at 150s
 - send SIGKILL at 160s
  compute points w/simulator

* Strategies
  CLOCK: [2012-07-13 Fri 17:33]--[2012-07-13 Fri 18:11] =>  0:38
  CLOCK: [2012-07-13 Fri 17:19]--[2012-07-13 Fri 17:33] =>  0:14

 - compute as long as possible, keeping a route to emit when we get
   SIGINT.
 - use a parent-child model: the child does the hard stuff, and if it
   dies for any reason, have the parent output whatever it can.
 - always append abort to the route?

 - could we use connected components in planning regions?

 - probably want something like A* for route planning
   - SMA* might be wise
   - can we do something smartly based on the fact that there's only
     about 1G of RAM?

We may be able to winnow the state space with a well-tuned Bloom filter, too.

 - use lookahead in simulator to display danger regions

 - use the fact that the lift only opens if you have all the lambdas
   to consider alternate abort routes

 - one reason to optimize the CA is that the faster we can evaluate
   routes, the more options we can try.

Key to good planning is going to be proper modelling of the risk of
rocks; they basically have a triangular risk projection.

The relationship between earth and empty spaces is key.

Use the PAIP and AIMA source (and books) as references.

Per AIMA, problems consist of:
 - the initial state (map, metadata);
 - operators (robot movement);
 - goal test (at lift or about to be crushed or drowned);
 - path cost function (point value of route).

Also, an admissable heuristic should be monotonic and should be as
high as possible without overestimating.  You can take the maximum of
several admissible heuristics.

I'd say the first one to implement would be manhattan distance from
the robot to nearest lambda through all lambdas to the lift.

The number of lambdas is also a simple heuristic.  No path to the exit
can be shorter than that.

Flooding doesn't really change much, except for pruning many
possibilities.  I guess that if we can make it clear in our search
that certain possibilities become inaccessible as flooding proceeds,
we should be able to handle it.


Observations:
 - the lift only opens if all lambdas are collected.
 - rocks are presently the main hazard
 - there appears to be no penalty for appending A to a route.
 - there may be an opportunity for a peephole optimizer to improve a
   route.
 - it's possible to block oneself from the lift with rocks.
 - it's possible to get a negative score.

 - where the robot is standing presently is actually empty.
 - the state of the lift is implicit in the number of lambdas
   remaining.

 - any state is a goal state


 - the math is easier if we reverse y
 - with flooding, lambdas with higher positions become more valuable
   than lower-lying lambdas

One possible heuristic that could be computed early is the route if
rocks are considered empty.  This is somewhat accurate but certainly
an underestimate in the presence of rocks.

In the lifter, why don't we represent state in some way more relevant
to our heuristics, like a fatal bitplane (actually, just mark fatal
states as impassible).



* Research
  CLOCK: [2012-07-15 Sun 15:07]--[2012-07-15 Sun 16:16] =>  1:09
  CLOCK: [2012-07-15 Sun 11:51]--[2012-07-15 Sun 15:00] =>  3:09
  CLOCK: [2012-07-14 Sat 09:21]--[2012-07-14 Sat 11:12] =>  1:51
  CLOCK: [2012-07-13 Fri 18:25]--[2012-07-13 Fri 21:37] =>  3:12

Apparently IDA* with Manhattan Distance as a heuristic is very
successful for Sokoban.

 - can we use BDDs for this?
 - what about efficient cellular automata search?
 - D*-lite
 - SetA*

Consider a cluster approach for a heuristic.  Compute connected
components where a component consists of any three or four-way
adjacencies, and edges consist of two-way adjacencies.  Cells with
only one opening are ignored.

I wonder if a BDD could be used in the larger route planning, if each
variable represents getting a lambda, you're trying to satisfy f(x..)
= 1 (get all lambdas) with minimal weight (cost of getting that lambda
from here).

A zero-supressed BDD might be good for representing a function that's
sparse, like rock mapping or similar.

Ok, clearly I don't understand BDDs/ZDDs well enough to implement
them, so back to simpler approaches.


Could we use an image processing tool to speed this process up?

Use Morton's Z-order curve for locality?

If you use a highly-local measure, can you stream states?

Can we transform states directly to score values efficiently?

If you do the connected components-via-space-filling-curve approach,
your model should make everything outside a wall impassible.

Can we resolve the beard/rock conflict through bitwise manipulation?

Branching: each node has up to four adjacencies, with trampolines
being the only case where forward->back is not the same as
wait. (except for other side-effects)


Make your own maps using the method of Johnson, Yannakis, and
Togelius:
 - Initialize a grid to 50% earth, 50% wall
 - iterate a CA with one rule:
   - if (Moore neighborhood) 5 or more neighbors same as self,
     - become rock, otherwise floor.
 - the larger the n, the wider the caves

Potential heuristic: per 2_kap2.pdf, use a closed space-filling curve
like Moore or Sierpinski to generate a heuristic measure for a tour of
points (all lambdas).

Maybe the estimated cost of touring the lambdas plus the manhattan
distance from the last lambda in the tour to the lift?

** MCTS
   CLOCK: [2012-07-15 Sun 16:22]--[2012-07-15 Sun 16:30] =>  0:08
   CLOCK: [2012-07-15 Sun 16:16]--[2012-07-15 Sun 16:18] =>  0:02

- each node in the tree represents:
  - a world state
  - the average score of its subtrees
  - the number of visits

Repeatedly, we do:
 - selection: traverse the tree
   - choose node that maximizes upper confidence for trees:
     $$ X\= + C\cdot\sqrt{\over{\ln t(N)}{t(N_i)}} + \sqrt{\over{\sum{x^2 - t(N_i)\cdotX\=^2+D}}{t(N_i)}} $$
     - where $t(N)$ is times visited, $X\=$ is the average game value,
       $x$ is the results obtained so far in the child node, and $D$
       is a high constant so as to make rarely explored nodes
       considered uncertain.
     - tweak $C$ and $D$ based on range of scoring
       - we can divide the points by 75*lambdas - (nlambdas+1) (absolute max
         score) to get a score in the range (-inf,1]
       - low C and D represents exploitation, high C and D represents
         exploration
       - probably start C at 0.5 and D at... 1?

 - simulation: random simulation from this state, calculating points
   - we're supposed to simulate til "end of game", but in this case,
     end of game can be any time, so instead we should check valid
     moves from here, caching points at each unique state
   - it may be possible to reach the same state with different amounts
     of points; if so, keep the shortest route (but what about water?
     nah, who cares, the next state after will figure that out.)

 - expansion: determine how many and which children should be stored
   in the tree
 - back-propagation: results are propagated back through the tree

The tree represents routes.

We initially populate the state table with the input state and zero
points.  This is the route that is emitted if all goes wrong.

When submitting states to the state table, keep the route with the
most points... this should be the shortest route, but since we risk
false positives by hashing states, we should compare the number of
points associated with the state instead.

Schadd et al. note that they only do selection if the threshold of the
node selected is greater than a certain amount (they chose 10),
otherwise they go straight to randomized simulation.


** References

Graphics Gems II
Samat's book



* Lightning Round
  DEADLINE: <2012-07-14 Sat 12:00>


** Getting back on track
   CLOCK: [2012-07-14 Sat 09:13]--[2012-07-14 Sat 09:21] =>  0:08
   CLOCK: [2012-07-13 Fri 21:44]--[2012-07-13 Fri 22:52] =>  1:08

Well, it's safe to say we've been distracted in many ways.  I think
the key for tonight should be getting a harness working and then a
simple lifter at least doing basic A*.

Ok.  What's the simplest possible harness?
 - given a map, execute lifter with map as input
 - set timer, send SIGINT, SIGKILL
 - pass route as output to simulator in score mode
 - read score back from simulator

How about testing the simulator?
 - input contains map and route as metadata
 - output contains final map and score
 - for each in, compare with out (diff -q)


Test suite:
 - simulator against cases plucked from the validator
 - harness against stubborn lifters
   - one does nothing until SIGINT
   - another does nothing until SIGKILL

Some system of evaluating lifters against each other...
Get the harness working first.  The graphical simulator can come after
the lightning round.

 
* Main deadline
  DEADLINE: <2012-07-16 Mon 12:00>

** Getting a submission in
   CLOCK: [2012-07-15 Sun 11:02]--[2012-07-15 Sun 11:51] =>  0:49

We have a harness and a (broken) simulator.  We need lifters.

The model has become so dynamic, I think we need to look at possible
heuristics again, but implement some kind of simple, fast, SMA*-style
solver.

We need g(n), the "cost" of the current position (points scored if we
abort right now), and h(n), a heuristic about how many points could be
scored if we moved to adjacent tiles.

How much state do we have to keep track of?
 - razors, water, lambdas
 - trampolines
 - rocks and beards are implicit in the map

Some way to collapse states and use something like D*lite would be
helpful.  You could also use homotopic contraction to crush large
maps, as long as you kept track of the distance compressed.

Is there a way to sparsely consider only areas into which we can move?
Probably that should be the first thing we do... break the map into
connected components using a simple bitwise connectivity model and
trampolines.

Why don't we store components as some kind of space filling curve from
the robot origin so that move consideration is localized?  Aim for
less space consumption than a simple grid, even when the map is dense.

However you do it, it needs to be fast to compute the next state from
the point of view of the cost and heuristic functions.

Worst case locality of a curve:
  $$\over{d(p,q)^2}{A(p,q)}$$
with $d(p,q)$ the distance between points $p$ and $q$, and $A(p,q)$
the area filled by the curve between $p$ and $q$.

